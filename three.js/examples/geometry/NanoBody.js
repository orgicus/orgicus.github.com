var NanoBody = function () {

	var scope = this;

	THREE.Geometry.call(this);

	v( 10.000000, 11.000000, -21.000000 );
	v( 10.000000, 5.000000, -26.000000 );
	v( 10.000000, 5.000000, -26.000000 );
	v( 10.000000, 8.000000, -12.000000 );
	v( 10.000000, 11.000000, -12.000000 );
	v( 10.000000, 11.000000, -21.000000 );
	v( 10.000000, 5.000000, -26.000000 );
	v( 10.000000, 11.000000, 14.000000 );
	v( 10.000000, 4.000000, 22.000000 );
	v( 10.000000, 11.000000, 26.000000 );
	v( 10.000000, -11.000000, 26.000000 );
	v( 10.000000, 8.000000, 14.000000 );
	v( 10.000000, 8.000000, -12.000000 );
	v( 10.000000, -3.000000, 22.000000 );
	v( 10.000000, -3.000000, 18.000000 );
	v( 10.000000, -11.000000, -26.000000 );
	v( 10.000000, 4.000000, 18.000000 );
	v( 10.000000, 11.000000, -12.000000 );
	v( 10.000000, 8.000000, 14.000000 );
	v( 10.000000, 8.000000, -12.000000 );
	v( 10.000000, 11.000000, 14.000000 );
	v( 10.000000, 8.000000, 14.000000 );
	v( 10.000000, 11.000000, 26.000000 );
	v( 10.000000, 11.000000, -12.000000 );
	v( 10.000000, 11.000000, 14.000000 );
	v( 10.000000, 11.000000, -21.000000 );
	v( 10.000000, 11.000000, -21.000000 );
	v( 10.000000, 5.000000, -26.000000 );
	v( 10.000000, 5.000000, -26.000000 );
	v( 5.000000, 11.000000, -12.000000 );
	v( 3.000000, 11.000000, -12.000000 );
	v( 4.000000, 4.000000, 22.000000 );
	v( 4.000000, -11.000000, 26.000000 );
	v( 4.000000, -3.000000, 22.000000 );
	v( 4.000000, -3.000000, 18.000000 );
	v( 4.000000, 8.000000, 14.000000 );
	v( 4.000000, 4.000000, 18.000000 );
	v( 3.000000, 11.000000, -17.000000 );
	v( 4.000000, 8.000000, 14.000000 );
	v( 4.000000, 11.000000, 26.000000 );
	v( 4.000000, 11.000000, 14.000000 );
	v( 5.000000, 11.000000, -17.000000 );
	v( 4.000000, -11.000000, 14.000000 );
	v( -5.000000, 11.000000, -17.000000 );
	v( -4.000000, -11.000000, 14.000000 );
	v( -5.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -17.000000 );
	v( -5.000000, 8.000000, -17.000000 );
	v( 5.000000, 8.000000, -12.000000 );
	v( 3.000000, 8.000000, -12.000000 );
	v( 3.000000, 8.000000, -17.000000 );
	v( 5.000000, 8.000000, -17.000000 );
	v( -4.000000, 8.000000, 7.000000 );
	v( 4.000000, 8.000000, 7.000000 );
	v( -4.000000, -11.000000, 7.000000 );
	v( 4.000000, -11.000000, 7.000000 );
	v( -4.000000, 6.000000, -5.000000 );
	v( -4.000000, 6.000000, -8.000000 );
	v( -4.000000, 6.000000, -1.000000 );
	v( -4.000000, 6.000000, 1.000000 );
	v( -4.000000, 8.000000, 1.000000 );
	v( 4.000000, 6.000000, -5.000000 );
	v( 4.000000, 6.000000, -8.000000 );
	v( -4.000000, 8.000000, -1.000000 );
	v( -4.000000, 8.000000, -5.000000 );
	v( -4.000000, 8.000000, -8.000000 );
	v( 4.000000, 6.000000, -1.000000 );
	v( 4.000000, 6.000000, 1.000000 );
	v( 4.000000, 8.000000, 1.000000 );
	v( 4.000000, 8.000000, -1.000000 );
	v( 4.000000, 8.000000, -5.000000 );
	v( 4.000000, 8.000000, -8.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 4.000000, 22.000000 );
	v( -10.000000, -11.000000, 26.000000 );
	v( -10.000000, -3.000000, 22.000000 );
	v( -10.000000, -3.000000, 18.000000 );
	v( -10.000000, -11.000000, -26.000000 );
	v( -10.000000, 4.000000, 18.000000 );
	v( -10.000000, 8.000000, -12.000000 );
	v( -10.000000, 8.000000, 14.000000 );
	v( -10.000000, 11.000000, 26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 11.000000, 14.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -5.000000, 11.000000, -12.000000 );
	v( -3.000000, 11.000000, -12.000000 );
	v( -4.000000, 4.000000, 22.000000 );
	v( -4.000000, -11.000000, 26.000000 );
	v( -4.000000, -3.000000, 22.000000 );
	v( -4.000000, -3.000000, 18.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 4.000000, 18.000000 );
	v( -3.000000, 11.000000, -17.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 11.000000, 26.000000 );
	v( -4.000000, 11.000000, 14.000000 );
	v( -5.000000, 11.000000, -17.000000 );
	v( -4.000000, -11.000000, 14.000000 );
	v( -5.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -17.000000 );
	v( -5.000000, 8.000000, -17.000000 );
	v( -4.000000, 8.000000, 7.000000 );
	v( -4.000000, -11.000000, 7.000000 );
	v( -4.000000, 6.000000, -5.000000 );
	v( -4.000000, 6.000000, -8.000000 );
	v( -4.000000, 6.000000, -1.000000 );
	v( -4.000000, 6.000000, 1.000000 );
	v( -4.000000, 8.000000, 1.000000 );
	v( -4.000000, 8.000000, -1.000000 );
	v( -4.000000, 8.000000, -5.000000 );
	v( -4.000000, 8.000000, -8.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 4.000000, 22.000000 );
	v( -10.000000, -11.000000, 26.000000 );
	v( -10.000000, -3.000000, 22.000000 );
	v( -10.000000, -3.000000, 18.000000 );
	v( -10.000000, -11.000000, -26.000000 );
	v( -10.000000, 4.000000, 18.000000 );
	v( -10.000000, 8.000000, -12.000000 );
	v( -10.000000, 8.000000, 14.000000 );
	v( -10.000000, 11.000000, 26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 11.000000, 14.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -5.000000, 11.000000, -12.000000 );
	v( -3.000000, 11.000000, -12.000000 );
	v( -4.000000, 4.000000, 22.000000 );
	v( -4.000000, -11.000000, 26.000000 );
	v( -4.000000, -3.000000, 22.000000 );
	v( -4.000000, -3.000000, 18.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 4.000000, 18.000000 );
	v( -3.000000, 11.000000, -17.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 11.000000, 26.000000 );
	v( -4.000000, 11.000000, 14.000000 );
	v( -5.000000, 11.000000, -17.000000 );
	v( -4.000000, -11.000000, 14.000000 );
	v( -5.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -12.000000 );
	v( -3.000000, 8.000000, -17.000000 );
	v( -5.000000, 8.000000, -17.000000 );
	v( -4.000000, 8.000000, 7.000000 );
	v( -4.000000, -11.000000, 7.000000 );
	v( -4.000000, 6.000000, -5.000000 );
	v( -4.000000, 6.000000, -8.000000 );
	v( -4.000000, 6.000000, -1.000000 );
	v( -4.000000, 6.000000, 1.000000 );
	v( -4.000000, 8.000000, 1.000000 );
	v( -4.000000, 8.000000, -1.000000 );
	v( -4.000000, 8.000000, -5.000000 );
	v( -4.000000, 8.000000, -8.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 4.000000, 22.000000 );
	v( -10.000000, -11.000000, 26.000000 );
	v( -10.000000, -3.000000, 22.000000 );
	v( -10.000000, -3.000000, 18.000000 );
	v( -10.000000, -11.000000, -26.000000 );
	v( -10.000000, 4.000000, 18.000000 );
	v( -10.000000, 8.000000, -12.000000 );
	v( -10.000000, 8.000000, 14.000000 );
	v( -10.000000, 11.000000, 26.000000 );
	v( -10.000000, 11.000000, -12.000000 );
	v( -10.000000, 11.000000, 14.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 11.000000, -21.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -10.000000, 5.000000, -26.000000 );
	v( -5.000000, 11.000000, -12.000000 );
	v( -3.000000, 11.000000, -12.000000 );
	v( -4.000000, 4.000000, 22.000000 );
	v( -4.000000, -11.000000, 26.000000 );
	v( -4.000000, -3.000000, 22.000000 );
	v( -4.000000, -3.000000, 18.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 4.000000, 18.000000 );
	v( -3.000000, 11.000000, -17.000000 );
	v( -4.000000, 8.000000, 14.000000 );
	v( -4.000000, 11.000000, 26.000000 );
	v( -4.000000, 11.000000, 14.000000 );

	f3( 26, 27, 28 );
	uv( 0.000000, 1.000000, 0.996643, 0.000000, 1.000000, 0.000000);
	f4( 180, 173, 178, 177 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 68, 67, 59, 60 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 14, 34, 33, 13 );
	uv( 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000);
	f3( 21, 14, 19 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000);
	f4( 59, 67, 70, 64 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 24, 40, 39, 22 );
	uv( 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000);
	f3( 55, 175, 178 );
	uv( 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000);
	f3( 2, 1, 0 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 0, 26, 28, 2 );
	uv( 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000);
	f4( 1, 27, 26, 0 );
	uv( 0.996643, 0.000000, 0.996643, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000);
	f4( 2, 28, 27, 1 );
	uv( 1.000000, 0.000000, 1.000000, 0.000000, 0.996643, 0.000000, 0.996643, 0.000000);
	f4( 8, 16, 21, 24 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 22, 10, 13, 8 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 189, 183, 180, 45 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 6, 25, 4, 19 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 15, 14, 13, 10 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 70, 67, 68, 69 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f3( 22, 8, 24 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000);
	f4( 8, 31, 36, 16 );
	uv( 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000);
	f4( 21, 38, 40, 24 );
	uv( 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
	f4( 22, 39, 32, 10 );
	uv( 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000);
	f4( 13, 33, 31, 8 );
	uv( 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 1.000000);
	f4( 44, 192, 175, 55 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 16, 36, 34, 14 );
	uv( 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
	f4( 58, 63, 72, 66 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 49, 52, 51, 50 );
	uv( 0.167026, 0.832973, 0.832974, 0.832973, 0.832974, 0.167026, 0.167026, 0.167026);
	f4( 36, 40, 42, 34 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 31, 39, 40, 36 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 32, 39, 31, 33 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 32, 33, 34, 42 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 48, 47, 197, 43 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 62, 63, 58, 57 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 30, 37, 197, 190 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 41, 52, 49, 29 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 37, 51, 52, 41 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 26, 41, 29, 23 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 57, 58, 66, 65 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 30, 50, 51, 37 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 19, 23, 29, 49 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 189, 43, 186, 183 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 72, 63, 62, 71 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 19, 72, 35, 21 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f3( 21, 16, 14 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 71, 62, 57, 65 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 69, 68, 60, 61 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 195, 66, 180, 181 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 26, 28, 188, 186 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 15, 6, 19, 14 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 10, 32, 42, 56 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f3( 10, 56, 15 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000);
	f4( 35, 54, 56, 42 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f3( 187, 186, 188 );
	uv( 0.996643, 0.000000, 0.000000, 1.000000, 1.000000, 0.000000);
	f4( 15, 178, 188, 28 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 47, 46, 190, 197 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 193, 194, 177, 176 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000);
	f3( 177, 181, 180 );
	uv( 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000);
	f4( 54, 69, 61, 53 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 199, 200, 184, 182 );
	uv( 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000);
	f4( 55, 53, 195, 44 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f3( 170, 171, 169 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000);
	f4( 188, 186, 169, 171 );
	uv( 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000);
	f4( 186, 187, 170, 169 );
	uv( 0.000000, 1.000000, 0.996643, 0.000000, 0.996643, 0.000000, 0.000000, 1.000000);
	f4( 187, 188, 171, 170 );
	uv( 0.996643, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.996643, 0.000000);
	f4( 181, 179, 174, 184 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 176, 175, 182, 174 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f3( 179, 181, 177 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 1.000000);
	f4( 172, 185, 173, 180 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 176, 177, 178, 175 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f4( 60, 59, 64, 61 );
	uv( 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000);
	f3( 174, 182, 184 );
	uv( 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000);
	f4( 196, 191, 174, 179 );
	uv( 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	f4( 200, 198, 181, 184 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 192, 199, 182, 175 );
	uv( 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000);
	f4( 191, 193, 176, 174 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 56, 55, 178, 15 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000);
	f4( 194, 196, 179, 177 );
	uv( 0.000000, 0.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 70, 71, 65, 64 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 47, 48, 45, 46 );
	uv( 0.832974, 0.167026, 0.832974, 0.832973, 0.167026, 0.832973, 0.167026, 0.167026);
	f4( 44, 200, 196, 194 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 200, 199, 191, 196 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 191, 199, 192, 193 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 194, 193, 192, 44 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 72, 19, 180, 66 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 50, 30, 190, 46 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 43, 41, 26, 186 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);
	f4( 45, 48, 43, 189 );
	uv( 1.000000, 0.000000, 1.000000, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000);
	f4( 56, 54, 53, 55 );
	uv( 0.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000);

	scope.colors = {};
	scope.selections = {};
	scope.colors["all"] = 0xcac1ba;
	scope.selections["all"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87];

	scope.autoColor = function(){
		for(var s in this.selections){
			for(var i = 0 ; i < this.selections[s].length; i++) this.faces[this.selections[s][i]].material = [ new THREE.MeshColorFillMaterial( this.colors[s],1) ];
		}
	}

	scope.getPosition = function(){	return new THREE.Vector3(0.031317710876464844, 13.365085601806641, 6.3298587799072266);	}

	scope.getRotation = function(){	return new THREE.Vector3(-1.5707963705062866, 0.0, 0.0);	}

	scope.getScale = function(){	return new THREE.Vector3(6.0, 6.0, 6.0);	}

	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );

	}

	function f3( a, b, c, nx, ny, nz ) {

		scope.faces.push( new THREE.Face3( a, b, c, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function f4( a, b, c, d, nx, ny, nz ) {

		scope.faces.push( new THREE.Face4( a, b, c, d, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function uv( u1, v1, u2, v2, u3, v3, u4, v4 ) {

		var uv = [];
		uv.push( new THREE.UV( u1, v1 ) );
		uv.push( new THREE.UV( u2, v2 ) );
		uv.push( new THREE.UV( u3, v3 ) );
		if ( u4 && v4 ) uv.push( new THREE.UV( u4, v4 ) );
		scope.uvs.push( uv );
	}

}

NanoBody.prototype = new THREE.Geometry();
NanoBody.prototype.constructor = NanoBody;