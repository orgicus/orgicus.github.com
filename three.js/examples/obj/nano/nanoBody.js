// Converted from: nanoBody.obj
//  vertices: 217
//  faces: 100 
//  materials: 1
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_threejs.py

var nanoBody = function ( urlbase ) {
    var scope = this;

    THREE.Geometry.call(this);

    var materials = [	{
	"a_dbg_color" : 0xffeeeeee,
	"a_dbg_index" : 0,
	"a_dbg_name" : "Mat"
	}];

    init_materials();
    
    var normals = [];

	v(-83.753887,-54.327301,-0.821590);
	v(-83.753887,103.172699,-0.821590);
	v(-61.253887,-54.327301,-0.821590);
	v(-61.253887,103.172699,-0.821590);
	v(-61.253887,-54.327301,-53.321590);
	v(-61.253887,103.172699,-53.321590);
	v(-83.753887,-54.327301,-53.321590);
	v(-83.753887,103.172699,-53.321590);
	v(61.253887,-54.327301,-0.821590);
	v(61.253887,103.172699,-0.821590);
	v(83.753887,-54.327301,-0.821590);
	v(83.753887,103.172699,-0.821590);
	v(83.753887,-54.327301,-53.321590);
	v(83.753887,103.172699,-53.321590);
	v(61.253887,-54.327301,-53.321590);
	v(61.253887,103.172699,-53.321590);
	v(60.188229,126.000000,66.000000);
	v(60.188229,156.000000,29.999998);
	v(60.188229,156.000000,29.999998);
	v(60.188229,72.000000,48.000000);
	v(60.188229,72.000000,66.000000);
	v(60.188229,126.000000,66.000000);
	v(60.188229,156.000000,29.999998);
	v(60.188229,-84.000000,66.000000);
	v(60.188229,-132.000000,23.999998);
	v(60.188229,-156.000000,66.000000);
	v(60.188229,-156.000000,-66.000000);
	v(60.188229,-84.000000,48.000000);
	v(60.188229,72.000000,48.000000);
	v(60.188229,-132.000000,-18.000002);
	v(60.188229,-108.000000,-18.000002);
	v(60.188229,156.000000,-66.000000);
	v(60.188229,-108.000000,23.999998);
	v(60.188229,72.000000,66.000000);
	v(60.188229,-84.000000,48.000000);
	v(60.188229,72.000000,48.000000);
	v(60.188229,-84.000000,66.000000);
	v(60.188229,-84.000000,48.000000);
	v(60.188229,-156.000000,66.000000);
	v(60.188229,72.000000,66.000000);
	v(60.188229,-84.000000,66.000000);
	v(60.188229,126.000000,66.000000);
	v(60.188229,126.000000,66.000000);
	v(60.188229,156.000000,29.999998);
	v(60.188229,156.000000,29.999998);
	v(30.188229,72.000000,66.000000);
	v(18.188229,72.000000,66.000000);
	v(24.188229,-132.000000,23.999998);
	v(24.188229,-156.000000,-66.000000);
	v(24.188229,-132.000000,-18.000002);
	v(24.188229,-108.000000,-18.000002);
	v(24.188229,-84.000000,48.000000);
	v(24.188229,-108.000000,23.999998);
	v(18.188229,102.000000,66.000000);
	v(24.188229,-84.000000,48.000000);
	v(24.188229,-156.000000,66.000000);
	v(24.188229,-84.000000,66.000000);
	v(30.188229,102.000000,66.000000);
	v(24.188229,-84.000000,-66.000000);
	v(-29.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,-66.000000);
	v(-29.811771,72.000000,48.000000);
	v(-17.811771,72.000000,48.000000);
	v(-17.811771,102.000000,48.000000);
	v(-29.811771,102.000000,48.000000);
	v(30.188229,72.000000,48.000000);
	v(18.188229,72.000000,48.000000);
	v(18.188229,102.000000,48.000000);
	v(30.188229,102.000000,48.000000);
	v(-23.811771,-41.999996,48.000000);
	v(24.188229,-41.999996,48.000000);
	v(-23.811771,-41.999996,-66.000000);
	v(24.188229,-41.999996,-66.000000);
	v(-23.811771,30.000004,35.999998);
	v(-23.811771,48.000004,35.999998);
	v(-23.811771,6.000004,35.999998);
	v(-23.811771,-5.999996,35.999998);
	v(-23.811771,-5.999996,48.000000);
	v(24.188229,30.000004,35.999998);
	v(24.188229,48.000004,35.999998);
	v(-23.811771,6.000004,48.000000);
	v(-23.811771,30.000004,48.000000);
	v(-23.811771,48.000004,48.000000);
	v(24.188229,6.000004,35.999998);
	v(24.188229,-5.999996,35.999998);
	v(24.188229,-5.999996,48.000000);
	v(24.188229,6.000004,48.000000);
	v(24.188229,30.000004,48.000000);
	v(24.188229,48.000004,48.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,-132.000000,23.999998);
	v(-59.811771,-156.000000,-66.000000);
	v(-59.811771,-132.000000,-18.000002);
	v(-59.811771,-108.000000,-18.000002);
	v(-59.811771,156.000000,-66.000000);
	v(-59.811771,-108.000000,23.999998);
	v(-59.811771,72.000000,48.000000);
	v(-59.811771,-84.000000,48.000000);
	v(-59.811771,-156.000000,66.000000);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,-84.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-29.811771,72.000000,66.000000);
	v(-17.811771,72.000000,66.000000);
	v(-23.811771,-132.000000,23.999998);
	v(-23.811771,-156.000000,-66.000000);
	v(-23.811771,-132.000000,-18.000002);
	v(-23.811771,-108.000000,-18.000002);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-108.000000,23.999998);
	v(-17.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-156.000000,66.000000);
	v(-23.811771,-84.000000,66.000000);
	v(-29.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,-66.000000);
	v(-29.811771,72.000000,48.000000);
	v(-17.811771,72.000000,48.000000);
	v(-17.811771,102.000000,48.000000);
	v(-29.811771,102.000000,48.000000);
	v(-23.811771,-41.999996,48.000000);
	v(-23.811771,-41.999996,-66.000000);
	v(-23.811771,30.000004,35.999998);
	v(-23.811771,48.000004,35.999998);
	v(-23.811771,6.000004,35.999998);
	v(-23.811771,-5.999996,35.999998);
	v(-23.811771,-5.999996,48.000000);
	v(-23.811771,6.000004,48.000000);
	v(-23.811771,30.000004,48.000000);
	v(-23.811771,48.000004,48.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,-132.000000,23.999998);
	v(-59.811771,-156.000000,-66.000000);
	v(-59.811771,-132.000000,-18.000002);
	v(-59.811771,-108.000000,-18.000002);
	v(-59.811771,156.000000,-66.000000);
	v(-59.811771,-108.000000,23.999998);
	v(-59.811771,72.000000,48.000000);
	v(-59.811771,-84.000000,48.000000);
	v(-59.811771,-156.000000,66.000000);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,-84.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-29.811771,72.000000,66.000000);
	v(-17.811771,72.000000,66.000000);
	v(-23.811771,-132.000000,23.999998);
	v(-23.811771,-156.000000,-66.000000);
	v(-23.811771,-132.000000,-18.000002);
	v(-23.811771,-108.000000,-18.000002);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-108.000000,23.999998);
	v(-17.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-156.000000,66.000000);
	v(-23.811771,-84.000000,66.000000);
	v(-29.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,-66.000000);
	v(-29.811771,72.000000,48.000000);
	v(-17.811771,72.000000,48.000000);
	v(-17.811771,102.000000,48.000000);
	v(-29.811771,102.000000,48.000000);
	v(-23.811771,-41.999996,48.000000);
	v(-23.811771,-41.999996,-66.000000);
	v(-23.811771,30.000004,35.999998);
	v(-23.811771,48.000004,35.999998);
	v(-23.811771,6.000004,35.999998);
	v(-23.811771,-5.999996,35.999998);
	v(-23.811771,-5.999996,48.000000);
	v(-23.811771,6.000004,48.000000);
	v(-23.811771,30.000004,48.000000);
	v(-23.811771,48.000004,48.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,-132.000000,23.999998);
	v(-59.811771,-156.000000,-66.000000);
	v(-59.811771,-132.000000,-18.000002);
	v(-59.811771,-108.000000,-18.000002);
	v(-59.811771,156.000000,-66.000000);
	v(-59.811771,-108.000000,23.999998);
	v(-59.811771,72.000000,48.000000);
	v(-59.811771,-84.000000,48.000000);
	v(-59.811771,-156.000000,66.000000);
	v(-59.811771,72.000000,66.000000);
	v(-59.811771,-84.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,126.000000,66.000000);
	v(-59.811771,156.000000,29.999998);
	v(-59.811771,156.000000,29.999998);
	v(-29.811771,72.000000,66.000000);
	v(-17.811771,72.000000,66.000000);
	v(-23.811771,-132.000000,23.999998);
	v(-23.811771,-156.000000,-66.000000);
	v(-23.811771,-132.000000,-18.000002);
	v(-23.811771,-108.000000,-18.000002);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-108.000000,23.999998);
	v(-17.811771,102.000000,66.000000);
	v(-23.811771,-84.000000,48.000000);
	v(-23.811771,-156.000000,66.000000);
	v(-23.811771,-84.000000,66.000000);
    /*
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(0.000000,1.000000,0.996643,0.000000,1.000000,0.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,1.000000,1.000000,1.000000,1.000000,0.000000,1.000000,0.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1.000000);
	uv(1.000000,0.000000,0.000000,0.000000,1.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000);
	uv(0.996643,0.000000,0.996643,0.000000,0.000000,1.000000,0.000000,1.000000);
	uv(1.000000,0.000000,1.000000,0.000000,0.996643,0.000000,0.996643,0.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000);
	uv(0.000000,1.000000,0.000000,1.000000,1.000000,1.000000,1.000000,1.000000);
	uv(1.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,0.000000);
	uv(0.000000,0.000000,0.000000,0.000000,1.000000,0.000000,1.000000,0.000000);
	uv(1.000000,1.000000,1.000000,1.000000,0.000000,1.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.167026,0.832973,0.832974,0.832973,0.832974,0.167026,0.167026,0.167026);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.996643,0.000000,0.000000,1.000000,1.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,1.000000,1.000000,1.000000,0.000000);
	uv(1.000000,0.000000,0.000000,0.000000,1.000000,1.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000);
	uv(0.000000,1.000000,0.996643,0.000000,0.996643,0.000000,0.000000,1.000000);
	uv(0.996643,0.000000,1.000000,0.000000,1.000000,0.000000,0.996643,0.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,1.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000);
	uv(1.000000,0.000000,0.000000,0.000000,1.000000,1.000000);
	uv(1.000000,1.000000,0.000000,1.000000,0.000000,1.000000,1.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,1.000000,0.000000,1.000000);
	uv(0.000000,0.000000,1.000000,0.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.832974,0.167026,0.832974,0.832973,0.167026,0.832973,0.167026,0.167026);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
	uv(1.000000,0.000000,1.000000,1.000000,0.000000,1.000000,0.000000,0.000000);
	uv(0.000000,1.000000,1.000000,1.000000,1.000000,0.000000,0.000000,0.000000);
    */
	f4(2,3,1,0,0);
	f4(4,5,3,2,0);
	f4(6,7,5,4,0);
	f4(0,1,7,6,0);
	f4(3,5,7,1,0);
	f4(4,2,0,6,0);
	f4(10,11,9,8,0);
	f4(12,13,11,10,0);
	f4(14,15,13,12,0);
	f4(8,9,15,14,0);
	f4(11,13,15,9,0);
	f4(12,10,8,14,0);
	f3(42,43,44,0);
	f4(196,189,194,193,0);
	f4(84,83,75,76,0);
	f4(30,50,49,29,0);
	f3(37,30,35,0);
	f4(75,83,86,80,0);
	f4(40,56,55,38,0);
	f3(71,191,194,0);
	f3(18,17,16,0);
	f4(16,42,44,18,0);
	f4(17,43,42,16,0);
	f4(18,44,43,17,0);
	f4(24,32,37,40,0);
	f4(38,26,29,24,0);
	f4(205,199,196,61,0);
	f4(22,41,20,35,0);
	f4(31,30,29,26,0);
	f4(86,83,84,85,0);
	f3(38,24,40,0);
	f4(24,47,52,32,0);
	f4(37,54,56,40,0);
	f4(38,55,48,26,0);
	f4(29,49,47,24,0);
	f4(60,208,191,71,0);
	f4(32,52,50,30,0);
	f4(74,79,88,82,0);
	f4(65,68,67,66,0);
	f4(52,56,58,50,0);
	f4(47,55,56,52,0);
	f4(48,55,47,49,0);
	f4(48,49,50,58,0);
	f4(64,63,213,59,0);
	f4(78,79,74,73,0);
	f4(46,53,213,206,0);
	f4(57,68,65,45,0);
	f4(53,67,68,57,0);
	f4(42,57,45,39,0);
	f4(73,74,82,81,0);
	f4(46,66,67,53,0);
	f4(35,39,45,65,0);
	f4(205,59,202,199,0);
	f4(88,79,78,87,0);
	f4(35,88,51,37,0);
	f3(37,32,30,0);
	f4(87,78,73,81,0);
	f4(85,84,76,77,0);
	f4(211,82,196,197,0);
	f4(42,44,204,202,0);
	f4(31,22,35,30,0);
	f4(26,48,58,72,0);
	f3(26,72,31,0);
	f4(51,70,72,58,0);
	f3(203,202,204,0);
	f4(31,194,204,44,0);
	f4(63,62,206,213,0);
	f4(209,210,193,192,0);
	f3(193,197,196,0);
	f4(70,85,77,69,0);
	f4(215,216,200,198,0);
	f4(71,69,211,60,0);
	f3(186,187,185,0);
	f4(204,202,185,187,0);
	f4(202,203,186,185,0);
	f4(203,204,187,186,0);
	f4(197,195,190,200,0);
	f4(192,191,198,190,0);
	f3(195,197,193,0);
	f4(188,201,189,196,0);
	f4(192,193,194,191,0);
	f4(76,75,80,77,0);
	f3(190,198,200,0);
	f4(212,207,190,195,0);
	f4(216,214,197,200,0);
	f4(208,215,198,191,0);
	f4(207,209,192,190,0);
	f4(72,71,194,31,0);
	f4(210,212,195,193,0);
	f4(86,87,81,80,0);
	f4(63,64,61,62,0);
	f4(60,216,212,210,0);
	f4(216,215,207,212,0);
	f4(207,215,208,209,0);
	f4(210,209,208,60,0);
	f4(88,35,196,82,0);
	f4(66,46,206,62,0);
	f4(59,57,42,202,0);
	f4(61,64,59,205,0);
	f4(72,70,69,71,0);

    this.computeCentroids();
    this.computeNormals();
    
    function material_color( mi ) {
        var m = materials[mi];
        if( m.col_diffuse )
            return (m.col_diffuse[0]*255 << 16) + (m.col_diffuse[1]*255 << 8) + m.col_diffuse[2]*255;
        else if ( m.a_dbg_color )
            return  m.a_dbg_color;
        else 
            return 0xffeeeeee;
    }
    
    function v( x, y, z ) {
        scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
    }

    function f3( a, b, c, mi ) {
        var material = scope.materials[ mi ];
        scope.faces.push( new THREE.Face3( a, b, c, null, material ) );
    }

    function f4( a, b, c, d, mi ) {
        var material = scope.materials[ mi ];
        scope.faces.push( new THREE.Face4( a, b, c, d, null, material ) );
    }

    function f3n( a, b, c, mi, n1, n2, n3 ) {
        var material = scope.materials[ mi ];
        var n1x = normals[n1][0];
        var n1y = normals[n1][1];
        var n1z = normals[n1][2];
        var n2x = normals[n2][0];
        var n2y = normals[n2][1];
        var n2z = normals[n2][2];
        var n3x = normals[n3][0];
        var n3y = normals[n3][1];
        var n3z = normals[n3][2];
        scope.faces.push( new THREE.Face3( a, b, c, 
                          [new THREE.Vector3( n1x, n1y, n1z ), new THREE.Vector3( n2x, n2y, n2z ), new THREE.Vector3( n3x, n3y, n3z )], 
                          material ) );
    }

    function f4n( a, b, c, d, mi, n1, n2, n3, n4 ) {
        var material = scope.materials[ mi ];
        var n1x = normals[n1][0];
        var n1y = normals[n1][1];
        var n1z = normals[n1][2];
        var n2x = normals[n2][0];
        var n2y = normals[n2][1];
        var n2z = normals[n2][2];
        var n3x = normals[n3][0];
        var n3y = normals[n3][1];
        var n3z = normals[n3][2];
        var n4x = normals[n4][0];
        var n4y = normals[n4][1];
        var n4z = normals[n4][2];
        scope.faces.push( new THREE.Face4( a, b, c, d,
                          [new THREE.Vector3( n1x, n1y, n1z ), new THREE.Vector3( n2x, n2y, n2z ), new THREE.Vector3( n3x, n3y, n3z ), new THREE.Vector3( n4x, n4y, n4z )], 
                          material ) );
    }

    function uv( u1, v1, u2, v2, u3, v3, u4, v4 ) {
        var uv = [];
        uv.push( new THREE.UV( u1, v1 ) );
        uv.push( new THREE.UV( u2, v2 ) );
        uv.push( new THREE.UV( u3, v3 ) );
        if ( u4 && v4 ) uv.push( new THREE.UV( u4, v4 ) );
        scope.uvs.push( uv );
    }

    function init_materials() {
        scope.materials = [];
        for(var i=0; i<materials.length; ++i) {
            scope.materials[i] = [ create_material( materials[i], urlbase ) ];
        }
    }
    
    function is_pow2( n ) {
        var l = Math.log(n) / Math.LN2;
        return Math.floor(l) == l;
    }
    
    function nearest_pow2(n) {
        var l = Math.log(n) / Math.LN2;
        return Math.pow( 2, Math.round(l) );
    }
    
    function create_material( m ) {
        var material;
        
        if( m.map_diffuse && urlbase ) {
            var texture = document.createElement( 'canvas' );
            
            material = new THREE.MeshBitmapMaterial( texture );
            var image = new Image();
            
            image.onload = function () {
                
                if ( !is_pow2(this.width) || !is_pow2(this.height) ) {
                
                    var w = nearest_pow2( this.width );
                    var h = nearest_pow2( this.height );
                    material.bitmap.width = w;
                    material.bitmap.height = h;
                    material.bitmap.getContext("2d").drawImage( this, 0, 0, w, h );
                }
                else {
                    material.bitmap = this;
                }
                material.loaded = 1;
                
            };
            image.src = urlbase + "/" + m.map_diffuse;
        }
        else if( m.col_diffuse ) {
            var color = (m.col_diffuse[0]*255 << 16) + (m.col_diffuse[1]*255 << 8) + m.col_diffuse[2]*255;
            material = new THREE.MeshColorFillMaterial( color, m.transparency );
        }
        else if( m.a_dbg_color ) {
            material = new THREE.MeshColorFillMaterial( m.a_dbg_color );
        }
        else {
            material = new THREE.MeshColorFillMaterial( 0xffeeeeee );
        }

        return material;
    }
}

nanoBody.prototype = new THREE.Geometry();
nanoBody.prototype.constructor = nanoBody;
